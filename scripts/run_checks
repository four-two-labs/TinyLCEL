#!/bin/bash
set -euo pipefail

# Define colors for output
CYAN='\033[0;36m'
RED='\033[0;31m'
NC='\033[0m'
GREEN='\033[0;32m'
ORANGE='\033[0;33m'


find_venv_bin_path() {
    local venv_activate
    venv_activate=$(find "$PROJECT_ROOT" -type f | grep ".*/bin/activate$")
    VENV_BIN_PATH=$(dirname "$venv_activate")

    if [ -z "$venv_activate" ]; then
        echo -e "${RED}No virtual environment found${NC}"
        exit 1
    fi

    echo $VENV_BIN_PATH
}

apply_formatting() {
    # Check lint violations before formatting
    local pre_lint_output post_lint_output
    pre_lint_output=$($VENV_BIN_PATH/ruff check --config "$PROJECT_ROOT/pyproject.toml" "$PROJECT_ROOT"/src 2>/dev/null)
    local pre_lint_count=0
    if [[ "$pre_lint_output" != *"All checks passed!"* ]]; then
        pre_lint_count=$(echo "$pre_lint_output" | wc -l | xargs)
    fi

    # Run isort and count fixes
    local isort_output
    isort_output=$($VENV_BIN_PATH/isort --settings-path "$PROJECT_ROOT/pyproject.toml" "$PROJECT_ROOT"/{src,tests} 2>&1)
    SUMMARY_ISORT_FIXES=$(echo "$isort_output" | grep -c "Fixing " || true)

    # Run ruff format and count fixes
    local ruff_format_output
    ruff_format_output=$($VENV_BIN_PATH/ruff format --config "$PROJECT_ROOT/pyproject.toml" "$PROJECT_ROOT"/{src,tests} 2>&1)
    SUMMARY_RUFF_FORMAT_FIXES=0
    if [[ "$ruff_format_output" == *"files reformatted"* ]]; then
        SUMMARY_RUFF_FORMAT_FIXES=$(echo "$ruff_format_output" | grep -o '[0-9]\+' | head -1)
    fi

    # Check lint violations after formatting
    post_lint_output=$($VENV_BIN_PATH/ruff check --config "$PROJECT_ROOT/pyproject.toml" "$PROJECT_ROOT"/src 2>/dev/null)
    local post_lint_count=0
    if [[ "$post_lint_output" != *"All checks passed!"* ]]; then
        post_lint_count=$(echo "$post_lint_output" | wc -l | xargs)
    fi
    
    SUMMARY_LINT_FIXES_BY_FORMAT=$((pre_lint_count - post_lint_count))
    if [ "$SUMMARY_LINT_FIXES_BY_FORMAT" -lt 0 ]; then
        SUMMARY_LINT_FIXES_BY_FORMAT=0
    fi

    # Display results
    if [ "$SUMMARY_ISORT_FIXES" -gt 0 ]; then
        echo "  üìÑ Import sorting: Fixed $SUMMARY_ISORT_FIXES files"
    fi
    if [ "$SUMMARY_RUFF_FORMAT_FIXES" -gt 0 ]; then
        echo "  üé® Code formatting: Fixed $SUMMARY_RUFF_FORMAT_FIXES files"
    fi
    if [ "$SUMMARY_LINT_FIXES_BY_FORMAT" -gt 0 ]; then
        echo "  üîß Lint issues auto-fixed: $SUMMARY_LINT_FIXES_BY_FORMAT"
    fi
    if [ "$SUMMARY_ISORT_FIXES" -eq 0 ] && [ "$SUMMARY_RUFF_FORMAT_FIXES" -eq 0 ] && [ "$SUMMARY_LINT_FIXES_BY_FORMAT" -eq 0 ]; then
        echo "  ‚úÖ No formatting issues found"
    fi

    echo -e "${GREEN}OK${NC}"
    echo
}

run_lint_checks() {
    $VENV_BIN_PATH/ruff check --config "$PROJECT_ROOT/pyproject.toml" "$PROJECT_ROOT"/src
    echo -e "${GREEN}OK${NC}"
    echo
}

run_type_checks() {
    $VENV_BIN_PATH/mypy --config "$PROJECT_ROOT/pyproject.toml" "$PROJECT_ROOT"/{src,tests}
    echo -e "${GREEN}OK${NC}"
    echo
}

run_tests() {
    TEST_RESULT=$($VENV_BIN_PATH/pytest --cov=src --cov-report=term-missing -q "$PROJECT_ROOT/tests" 2>&1)
    echo "$TEST_RESULT"
    echo -e "${GREEN}OK${NC}"
    echo
}

show_quality_statistics() {
    local stats_output
    stats_output=$($VENV_BIN_PATH/ruff check --statistics --config "$PROJECT_ROOT/pyproject.toml" "$PROJECT_ROOT"/src 2>&1 || true)
    if [ -n "$stats_output" ]; then
        echo "$stats_output"
    else
        echo "üéâ No violations found - clean code!"
    fi
}

show_code_metrics() {
    echo -e "\n${CYAN}Code metrics (via radon):${NC}"
    local radon_output
    radon_output=$($VENV_BIN_PATH/radon raw --summary "$PROJECT_ROOT/src" 2>/dev/null | grep -A 10 "\*\* Total \*\*" || echo "")
    
    if [ -n "$radon_output" ]; then
        # Parse summary output
        local total_loc sloc lloc comments multi_comments blank
        total_loc=$(echo "$radon_output" | grep "LOC:" | awk '{print $2}' | head -1)
        sloc=$(echo "$radon_output" | grep "SLOC:" | awk '{print $2}' | head -1)
        lloc=$(echo "$radon_output" | grep "LLOC:" | awk '{print $2}' | head -1)
        comments=$(echo "$radon_output" | grep "Comments:" | awk '{print $2}' | head -1)
        multi_comments=$(echo "$radon_output" | grep "Multi:" | awk '{print $2}' | head -1)
        blank=$(echo "$radon_output" | grep "Blank:" | awk '{print $2}' | head -1)
        
        SUMMARY_SLOC="$sloc"  
        echo "  ‚úÖ Done"
    else
        echo "  ‚ùå Could not parse radon output (radon may not be installed)"
        SUMMARY_SLOC="N/A"
    fi
}

show_mccabe_complexity() {
    echo -e "\n${CYAN}McCabe complexity (max: 12):${NC}"
    local mccabe_output mccabe_exit_code
    mccabe_output=$($VENV_BIN_PATH/ruff check --select C901 --config "$PROJECT_ROOT/pyproject.toml" "$PROJECT_ROOT"/src 2>&1)
    mccabe_exit_code=$?
    
    if [ $mccabe_exit_code -eq 0 ] && [[ "$mccabe_output" == *"All checks passed!"* ]]; then
        echo "  ‚úÖ All functions within complexity limits"
    elif [ $mccabe_exit_code -eq 0 ] && [ -z "$mccabe_output" ]; then
        echo "  ‚úÖ All functions within complexity limits"
    else
        echo "$mccabe_output"
    fi
}

show_summary() {
    local total_files passed_tests coverage
    total_files=$(find "$PROJECT_ROOT/src" -name "*.py" | wc -l | xargs)
    passed_tests=$(echo "$TEST_RESULT" | grep -o '[0-9]* passed' | grep -o '[0-9]*' || echo "0")
    coverage=$(echo "$TEST_RESULT" | grep -o '[0-9]*%' | tail -1 || echo "N/A")
    
    # Ensure variables are set with defaults
    SUMMARY_ISORT_FIXES=${SUMMARY_ISORT_FIXES:-0}
    SUMMARY_RUFF_FORMAT_FIXES=${SUMMARY_RUFF_FORMAT_FIXES:-0}
    SUMMARY_LINT_FIXES_BY_FORMAT=${SUMMARY_LINT_FIXES_BY_FORMAT:-0}
    
    local total_format_fixes total_auto_fixes
    total_format_fixes=$((SUMMARY_ISORT_FIXES + SUMMARY_RUFF_FORMAT_FIXES))
    total_auto_fixes=$((total_format_fixes + SUMMARY_LINT_FIXES_BY_FORMAT))
    
    echo "  üìÅ Python files: $total_files"
    echo "  üíª Source lines: ${SUMMARY_SLOC:-N/A}"
    echo "  ‚úÖ Tests passed: $passed_tests"
    echo "  üß™ Test coverage: $coverage"
    echo "  üéØ Lint violations: 0"
    echo "  üîç Type errors: 0"
    echo "  üß† McCabe complexity: All good"
    echo "  üîß Auto-fixes applied: $total_auto_fixes ($SUMMARY_ISORT_FIXES import, $SUMMARY_RUFF_FORMAT_FIXES format, $SUMMARY_LINT_FIXES_BY_FORMAT lint)"
    echo -e "${GREEN}All checks passed! üöÄ${NC}"
    echo
}

# Main execution
main() {
    # Global variables for statistics
    SCRIPT_PATH=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
    export PROJECT_ROOT=$(cd "$SCRIPT_PATH/.." && pwd)
    export VENV_BIN_PATH=$(find_venv_bin_path)
    export SUMMARY_SLOC=""
    export SUMMARY_ISORT_FIXES=""
    export SUMMARY_RUFF_FORMAT_FIXES=""
    export SUMMARY_LINT_FIXES_BY_FORMAT=""
    export TEST_RESULT=""

    
    echo -e "===${ORANGE}Applying code formatting${NC}==="
    apply_formatting
    
    echo -e "===${ORANGE}Lint checks${NC}==="
    run_lint_checks
    
    echo -e "===${ORANGE}Static type checks${NC}==="
    run_type_checks
    
    echo -e "===${ORANGE}Running tests${NC}==="
    run_tests
    
    echo -e "===${ORANGE}Code quality statistics${NC}==="
    show_quality_statistics
    show_code_metrics
    show_mccabe_complexity
    echo
    echo -e "${GREEN}OK${NC}"
    echo
    
    echo -e "===${CYAN}Summary${NC}==="
    show_summary
}

# Run the script
main